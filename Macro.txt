Option Explicit

Function SetSpreadsheet(inPath As String)
'This is used to select a spreadsheet file, usually the source spreadsheet

Dim CorrectSheet As String
Dim SpreadSheetFile As String
Dim SpreadSheetPath As String

SpreadSheetPath = InputBox("Please enter the directory containing the sheet.", _
                            "Sheet Location", inPath)
SpreadSheetPath = SetPath(SpreadSheetPath)
SpreadSheetFile = Dir(SpreadSheetPath & "*.xlsx")
Do
  CorrectSheet = MsgBox("Is """ & SpreadSheetFile & """ the correct file?", _
                        vbYesNo + vbQuestion + vbMsgBoxSetForeground, _
                        "Correct?")
  If CorrectSheet = vbYes Then
    SetSpreadsheet = SpreadSheetPath & "\" & SpreadSheetFile
  Else
    SpreadSheetFile = Dir
  End If
Loop While CorrectSheet <> vbYes And SetSpreadsheet = vbNullString

End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Function GetListOfReps(inFile As String)

Dim I As Long
Dim TempArray() As String

Open inFile For Input As #1
I = 0
Do Until EOF(1)
  ReDim Preserve TempArray(I)
  Line Input #1, TempArray(I)
  I = I + 1
Loop
Close #1
GetListOfReps = TempArray

End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Function IsInArray(stringToBeFound As String, arr As Variant) As Boolean

IsInArray = (UBound(Filter(arr, stringToBeFound)) > -1)

End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Function FindFirstInstanceWhole(inFind As String, inSheet As Worksheet)

'Finds the search term
Set FindFirstInstanceWhole = inSheet.Range("A:A").Find(What:=inFind, _
                                                        LookAt:=xlWhole)
'Check for invalid search
If FindFirstInstanceWhole Is Nothing Then FindFirstInstanceWhole = -1

End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Function FindFirstInstancePart(inFind As String, inSheet As Worksheet)

'Finds the search term
Set FindFirstInstancePart = inSheet.Range("A:A").Find(What:=inFind, _
                                                      LookAt:=xlPart)
'Check for invalid search
If FindFirstInstancePart Is Nothing Then FindFirstInstancePart = -1

End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub Formatting(textBook As Workbook)
'This formats the text file before saving

Dim CurrentRow As Long
Dim TableEnd As Long
Dim TableStart As Long
Dim TxtSheet As Excel.Worksheet
Dim WholeTable As Range

Set TxtSheet = textBook.ActiveSheet
With TxtSheet
  'Locates header row of the table, looking for "Product"
  'Identifies the starting and ending row of the table
  TableStart = FindFirstInstanceWhole("Product", TxtSheet).Offset(1, 0).Row
  TableEnd = .Range("N" & .Rows.Count).End(xlUp).Offset(1, 0).Row
  'Set the entire range of the table
  Set WholeTable = .Range("A" & TableStart, "W" & TableEnd)
  'Insert the column for calculated values
  .Columns("O:O").Insert Shift:=xlToRight
  'Insert the actual formula
  .Range("O" & TableStart, "O" & (TableEnd - 1)).FormulaR1C1 = _
                                                  "=(RC[-1]-RC[-4])/RC[-1]"
  'Clear the changes column and the last row with totals
  .Range("N" & TableStart, "N" & TableEnd).ClearContents
  .Rows(TableEnd).ClearContents
  'Clear any sorting that may exist
  .Sort.SortFields.Clear
  'Sort the entire table by the Sold column (E), from largest to smallest
  WholeTable.Sort Key1:=.Range("E" & TableStart, "E" & TableEnd), _
                                Order1:=xlDescending, DataOption1:=xlSortNormal
  'This next loop is used to color lines without any sales in the past year red
  'First, set the counter / placeholder variable to be equal with the first row
  CurrentRow = TableStart
  'Next, this iterates through the table and, if the sales column is blank,
  'changes the font color to bright red
  Do While CurrentRow < TableEnd
    If IsEmpty(.Cells(CurrentRow, "E")) Then
      With .Rows(CurrentRow).Font
        .Color = 255
        .TintAndShade = 0
      End With
    End If
    CurrentRow = CurrentRow + 1
  Loop
  'This marks the appropriate rows with a currency style
  .Range("G:G,J:J,K:K").NumberFormat = "$#,##0.00"
  'This fills any cells with a negative gross profit ratio purple
  With .Columns("I:I")
    'Removes any conditional formatting that may exist (Mostly a safeguard)
    .FormatConditions.Delete
    'Condition searches for any cells with a negative value
    With .FormatConditions.Add(Type:=xlCellValue, _
                                Operator:=xlLess, _
                                Formula1:="=0")
      With .Interior
        .Color = 16751052 'The fill color
        .TintAndShade = 0
      End With
    'Only used with multiple conditional formatting rules
    '(To prevent further formatting of cells that are true in the first pass)
    .StopIfTrue = False
    End With
  End With
  .Columns.AutoFit
End With
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Function VerifyTextFile(inArray As Variant, inPath As String) As Integer
'Verify that text files exist in the directory by looking at array length

If UBound(inArray) = -1 Then
  MsgBox "No text files were found in this directory." & vbNewLine & _
      "The current directory is " & inPath & vbNewLine & _
      "Please confirm that you entered the correct path to the text files.", , _
      "No Valid Files Found"
  VerifyTextFile = 0
Else
  VerifyTextFile = 1
End If

End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub MakeAllDirs(sPath As String)
'https://www.devhut.net/2011/09/15/vba-create-directory-structurecreate-multiple-Dirs/
'Creates all parent direcories of a missing directory

Dim Dirs           As Variant
Dim I              As Long
Dim Start          As Long
Dim CurDir         As String

If sPath <> vbNullString Then
  Dirs = Split(sPath, "\")
    If Left(sPath, 2) = "\\" Then
      Start = 3
    Else
      Start = 1
    End If
  CurDir = Left(sPath, InStr(Start, sPath, "\"))
  For I = Start To UBound(Dirs)
    CurDir = CurDir & Dirs(I) & "\"
    If Dir(CurDir, vbDirectory) = vbNullString Then
      MkDir CurDir
    End If
  Next I
End If

End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Function SetPath(inPath As String)
'Sets a path

Dim MakePathAnswer As Long

'Check to ensure path is valid and text files are in the appropriate directory
If inPath = vbNullString Then
  Call ResetSettings
  End
ElseIf inPath Like "*[a-zA-Z][:\\]*" <> True Then
  If Len(inPath) > 1 And Not Right(inPath, 1) Like "[:\\]" _
      And Not inPath Like "*[0-9]*[:\\]" And Not inPath Like "*[0-9]*" Then
    MsgBox "Sorry, that path is not valid." & vbNewLine & _
            "Please ensure that the path ends with a colon or a backslash.", , _
            "Missing Colon or Backslash"
    inPath = vbNullString
  Else
    MsgBox "Sorry, that path is not valid.", , "Invalid Path"
    inPath = vbNullString
  End If
ElseIf Len(Dir(inPath, vbDirectory)) = 0 Then
  MakePathAnswer = MsgBox("Sorry, that path does not exist." & vbNewLine & _
                          "Would you like to create this path?", _
                          vbYesNo + vbQuestion + vbMsgBoxSetForeground, _
                          "Create directory?")
  If MakePathAnswer = vbYes Then
    Call MakeAllDirs(inPath)
  Else
    inPath = vbNullString
  End If
End If
If inPath <> vbNullString And Right(inPath, 1) <> "\" Then inPath = inPath & "\"
SetPath = inPath

End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Function GetRepName(inSheetAnswer As String, _
                      inSourceRow As Long, _
                      inSourceBook As Workbook, _
                      inContractNo As String)

'Gets the name of the sales representative from the source workbook
'Use Switch Case here

Dim Attempts As Long
Dim CurrentCell
Dim EmptyCount As Long
Dim SalesRepSplit

'Can't escape unless name is valid
Do While GetRepName Like "[a-zA-Z]*[ ]*[a-zA-Z]" <> True
  If inSheetAnswer = vbYes Then
    'This counts how many different companies fall under the same contract
    With inSourceBook.ActiveSheet
      If IsEmpty(.Cells(inSourceRow + 1, 2).Value) Then
        Set CurrentCell = .Cells(inSourceRow + 1, 2)
        EmptyCount = 1
        If IsEmpty(CurrentCell.Offset(1, 0)) Then
          CurrentCell = CurrentCell.Offset(1, 0)
          EmptyCount = EmptyCount + 1
        End If
      End If
      'If there are more than two companies on the same contract,
      'the main owner receives the email
      If Not IsEmpty(.Cells(inSourceRow, 8).Value) And EmptyCount > 2 Then
        SalesRepSplit = Split(Trim(.Cells(inSourceRow, 8)).Value, " ")
        GetRepName = Trim(SalesRepSplit(1)) & " " & Trim(SalesRepSplit(2))
      Else 'Otherwise the sales representative gets the email
        SalesRepSplit = Split(Trim(.Cells(inSourceRow, 7).Value), " ")
        GetRepName = Trim(SalesRepSplit(1)) & " " & Trim(SalesRepSplit(2))
      End If
    End With
    Attempts = Attempts + 1
  Else 'This runs if there is no source spreadsheet
    GetRepName = InputBox("Please enter the name of the Sales Representative" _
                            & vbNewLine & "associated with this contract." _
                            & vbNewLine & "Contract Number: " _
                            & inContractNo, "Sales Representative Name")
    If GetRepName = vbNullString Then
      Call ResetSettings
      End
    ElseIf GetRepName Like "*[0-9]*" Then
      MsgBox "Sorry, only letters are allowed in a " _
              & "Sales Representative's name." & vbNewLine & "Please enter " _
              & " the Representative's name with this format:" & vbNewLine _
              & "FirstName LastName", , "Invalid Character"
      GetRepName = vbNullString
    ElseIf InStr(GetRepName, " ") = 0 Then
      MsgBox "Please enter the Representative's name with this format:" _
                & vbNewLine & "FirstName LastName", , "Missing Space"
      GetRepName = vbNullString
    End If
  End If
  If Attempts = 3 Then
    MsgBox "A valid sales representative name was not found"
    Call ResetSettings
    End
  End If
Loop
GetRepName = StrConv(Trim(GetRepName), vbProperCase)

End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub MergeBooks(inBook As Workbook, inNonBook As Workbook)
'Merges contract and non contract items

Dim NonEnd As Long
Dim NonStart As Long
Dim OnEnd As Long

NonEnd = inNonBook.ActiveSheet.Range("N" & inNonBook.ActiveSheet.Rows.Count) _
          .End(xlUp).Offset(1, 0).Row
NonStart = FindFirstInstanceWhole("Product", inNonBook.ActiveSheet) _
            .Offset(1, 0).Row
OnEnd = inBook.ActiveSheet.Range("N" & inBook.ActiveSheet.Rows.Count) _
                                        .End(xlUp).Offset(1, 0).Row

'This copies the "NON" workbook's table to the end of the main workbook's table
'so they are sorted together

If NonStart <> NonEnd Then inBook.ActiveSheet _
                            .Range(inBook.ActiveSheet.Cells(OnEnd, 1), _
                                    inBook.ActiveSheet _
                                      .Cells(OnEnd + (NonEnd - NonStart), 22)) _
                                        .Value = inNonBook.ActiveSheet _
                                                  .Range(inNonBook.ActiveSheet _
                                                    .Cells(NonStart, 1), _
                                                      inNonBook.ActiveSheet _
                                                        .Cells(NonEnd, 22)) _
                                                          .Value

End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Function GetContract(textBook As Workbook)
'This gets the contract number from the information in the text file

Dim TxtContractSplit

'This checks for empty lines at the beginning of the worksheet'
Do While IsEmpty(textBook.ActiveSheet.Range("A1").Value)
 textBook.ActiveSheet.Range("A1").EntireRow.Delete
Loop
TxtContractSplit = Split(textBook.ActiveSheet.Range("A3").Value, ",")
'This block checks for a text file that only has one contract listed and then
'splits by space in order to get the correct value
If UBound(TxtContractSplit, 1) - LBound(TxtContractSplit, 1) + 1 <= 2 Then
  TxtContractSplit = Split(textBook.ActiveSheet.Range("A3").Value, " ")
  GetContract = Trim(TxtContractSplit(1))
Else
  GetContract = Trim(TxtContractSplit(1))
End If
'Removes trailing comma
If Right(GetContract, 1) = "," Then GetContract = Left(GetContract, _
                                                        Len(GetContract) - 1)

End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Function SourceContractRow(inSourceBook As Workbook, _
                            inTextBook As Workbook, _
                            inContractNo As String, _
                            inPath As String, _
                            inName As String) As Variant

Dim TempOne As String
Dim TempTwo As String
Dim TempArray(1 To 2) As Variant

TempOne = FindFirstInstancePart(inContractNo, inSourceBook.ActiveSheet)
If TempOne = -1 Then
  TempArray(1) = "Failed"
  SourceContractRow = TempArray
  Call CloseXslxFiles(inTextBook)
  Call MoveFailedFiles(inPath, inName)
Else
  TempOne = FindFirstInstancePart(inContractNo, inSourceBook.ActiveSheet).Row
  TempTwo = inContractNo & " " & Trim(inSourceBook.ActiveSheet _
                                        .Cells(TempOne, 2).Value)
  TempArray(1) = TempOne
  TempArray(2) = TempTwo
  SourceContractRow = TempArray
End If

End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Function SaveXlsxFiles(sourceBook As Workbook, _
                        textBook As Workbook, _
                        sheetAnswer As String, _
                        contractNo As String, _
                        inRep As String, _
                        sourceRow As Long, _
                        sourceName As String, _
                        inPath As String)
'Saves the file using the contract name and the sales rep name

Dim ContractAndRep(1 To 3) As String
Dim FirstName As String
Dim SaveName As String
Dim SavePath As String
Dim SpacePlace As Long

If sheetAnswer = vbYes Then 'If there is a source sheet
  SaveName = sourceName
  'This sets the current time as when the file was processed
  With sourceBook.ActiveSheet.Cells(sourceRow, 10)
    .NumberFormat = "mm/dd/yyyy hh:mm:ss"
    .Value = Now
    .Columns.AutoFit
  End With
Else 'No source sheet
  SaveName = Trim(textBook.ActiveSheet.Range("A2").Value)
  SpacePlace = InStr(1, SaveName, " ", vbTextCompare)
  'Checks for mismatched contract numbers, and alerts the user
  If contractNo <> Trim(Left(SaveName, SpacePlace)) Then
    SaveName = InputBox("Contract numbers do not match." & vbNewLine _
                          & "Please enter the contract number and name.", _
                          "Contract Number and Name")
    SpacePlace = InStr(1, SaveName, " ", vbTextCompare)
    contractNo = Trim(Left(SaveName, SpacePlace))
  End If
End If
SaveName = Replace(SaveName, "/", "-") 'Removes any forward slashes
SpacePlace = InStr(1, inRep, " ", vbTextCompare)
FirstName = Trim(Left(inRep, SpacePlace))
ContractAndRep(1) = contractNo
ContractAndRep(2) = inRep
ContractAndRep(3) = FirstName
SavePath = inPath & "Contract Renewals\" & ContractAndRep(2) & "\"
If Len(Dir(SavePath, vbDirectory)) = 0 Then Call MakeAllDirs(SavePath)
Application.DisplayAlerts = False
'51 is the enumeration for .xlsx files
textBook.SaveAs Filename:=Trim(SavePath) & Trim(SaveName) & ".xlsx", _
                            FileFormat:=51, AccessMode:=xlExclusive, _
                            ConflictResolution:=Excel.XlSaveConflictResolution _
                                                  .xlLocalSessionChanges
Application.DisplayAlerts = True
SaveXlsxFiles = ContractAndRep

End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub EmailXslxFiles(inContract, _
                        inSalesRep, _
                        inFirstName, _
                        inBodyText, _
                        inSendTime As Date, _
                        textBook As Workbook, _
                        inListOfCCRecipients() As String, _
                        inListForHouseAccount() As String, _
                        inListOfRepsToCC() As String)
'Working in Excel 2000-2016
'This example sends the last saved version of the Activeworkbook
'For Tips see: http://www.rondebruin.nl/win/winmail/Outlook/tips.htm

Dim EmailBody As String
Dim OutApp As Object
Dim OutMail As Object

Set OutApp = CreateObject("Outlook.Application")
Set OutMail = OutApp.CreateItem(0)
'Check if the file exists first and exit if it doesn't
'Get the body of the email
If inFirstName = "House" Then
  EmailBody = "Hello," & inBodyText
Else
  EmailBody = "Hello " & inFirstName & "," & inBodyText
End If
'On Error Resume Next
With OutMail
  .DeferredDeliveryTime = inSendTime
  If inSalesRep = "House Account" Then
    .To = Join(inListForHouseAccount, "; ")
  Else
    .To = inSalesRep
  End If
  If IsInArray(CStr(inSalesRep), inListOfRepsToCC) Then
    .CC = Join(inListOfCCRecipients, ",")
  Else
    .CC = vbNullString
  End If
  .BCC = vbNullString
  .Subject = inContract & " Contract Renewal"
  .HTMLBody = EmailBody
  .Attachments.Add textBook.FullName
  'You can add other files also like this
  '.Attachments.Add ("C:\test.txt")
  .Send   'or use .Display
  '.Display
End With
On Error GoTo 0
Set OutMail = Nothing
Set OutApp = Nothing

End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub CloseXslxFiles(inBook As Workbook)

Application.DisplayAlerts = False
inBook.Close
Application.DisplayAlerts = True

End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Function GetFileNames(filesLoc As String)
'Loops through the provided folder and stores matching filenames in an array

Dim I As Long
Dim InTxtList() As String
Dim TxtPath As String

I = 0
TxtPath = Dir(filesLoc & "*.txt")
'Structure from
'http://www.java2s.com/Code/VBA-Excel-Access-Word/File-Path/Usearraytostorealistoffiles.htm
'This next block avoids processing "non" text files
Do While TxtPath <> vbNullString
  If Not LCase(TxtPath) Like LCase("*NON.txt") Then
    I = I + 1
    ReDim Preserve InTxtList(1 To I)
    InTxtList(I) = TxtPath
    TxtPath = Dir
  Else
    TxtPath = Dir
  End If
Loop
GetFileNames = InTxtList

End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub MoveProcessedFiles(inFile As String, inPath As String)
'Moves processed files to a directory for archiving by month

Dim NameOfFile() As String

If Len(Dir(inPath & "Processed Files\" & MonthName(Month(Now)) & " " _
            & Year(Now) & "\", vbDirectory)) = 0 Then _
  Call MakeAllDirs(inPath & "Processed Files\" & MonthName(Month(Now)) & " " _
                    & Year(Now) & "\")
If inFile = vbNullString Then
  Call ResetSettings
  MsgBox("Worksheet error detected!")
  End
End If
'Gets just the text file name, and saves it to NameOfFile
NameOfFile = Split(inFile, "\")
'Saves the file under the current month and year folder
Name inFile As inPath & "Processed Files\" & MonthName(Month(Now)) _
                      & " " & Year(Now) & "\" & NameOfFile(UBound(NameOfFile))

End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub PrepareSource(inSourceBook As Workbook, namesArr() As String)
'Properly formats the source sheet for logging

Dim FirstAddress As String
Dim I As Long
Dim Rng As Range

With inSourceBook.Worksheets(1)
  If .Range("M1") <> "Prepared" Then
    'This fixes the partial name and an error
    .Cells.Replace What:="Salvers", Replacement:="SALVERSON", LookAt:=xlPart, _
      SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
      ReplaceFormat:=True
    .Cells.Replace What:="Binkowski-EBI", Replacement:="BINKOWSKI", _
      LookAt:=xlPart, SearchOrder:=xlByRows, MatchCase:=False, _
      SearchFormat:=False, ReplaceFormat:=True
    'Search Column or range
    With .Worksheets(1).Range("G:G")
      For I = LBound(namesArr) To UBound(namesArr)
        'If you want to find a part of the rng.value then use xlPart
        'if you use LookIn:=xlValues it will also work with a
        'formula cell that evaluates to the search term.
        'This next block searches for the values in the above array
        Set Rng = .Find(What:=namesArr(I), _
                After:=.Cells(.Cells.Count), _
                LookIn:=xlFormulas, _
                LookAt:=xlPart, _
                SearchOrder:=xlByRows, _
                SearchDirection:=xlNext, _
                MatchCase:=False)
        If Not Rng Is Nothing Then
          FirstAddress = Rng.Address
          Do
            'Mark to the right if the search term is found
            With Rng.Offset(0, 3)
              .Value = "IGNORED"
              .Interior.Color = 65535
            End With
            Set Rng = .FindNext(Rng)
          Loop While Not Rng Is Nothing And Rng.Address <> FirstAddress
        End If
      Next I
    End With
    With .Cells(1, 9)
      .Value = "Time Pulled"
      .Interior.Color = 12632256
    End With
    With .Cells(1, 10)
      .Value = "Time Processed"
      .Interior.Color = 12632256
    End With
    With .Cells(1, 11)
      .Value = "Time Sent"
      .Interior.Color = 12632256
    End With
    .Range("A:K").Borders.LineStyle = xlContinuous
    .Range("M3").Value = "Last Run:"
    .Range("M1").Value = "Prepared"
  End If
  .Range("M2").Value = "RUNNING"
  .Cells.Font.Name = "Tahoma"
  .Cells.Columns.AutoFit
End With
inSourceBook.Save
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub MoveSpreadsheets(inPath As String)
'http://www.rondebruin.nl/win/s3/win026.htm
'This moves the sent spreadsheets to the proper directory for archiving

Dim FSO As Object
Dim FromPath As String
Dim ToPath As String

FromPath = inPath & "Contract Renewals\*"
ToPath = "S:\Contract Reviews\"
Set FSO = CreateObject("scripting.filesystemobject")
FSO.CopyFolder Source:=FromPath, Destination:=ToPath
FSO.DeleteFolder FromPath 'Removes the folder after files are copied

End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub SetSettings()
'This helps the macro run faster

Application.ScreenUpdating = False
Application.Calculation = xlCalculationManual
Application.EnableEvents = False

End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub ResetSettings()
'This resets the modified settings to their defaults

Application.ScreenUpdating = True
Application.Calculation = xlCalculationAutomatic
Application.EnableEvents = True

End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub MoveFailedFiles(inPath As String, inName As String)
'This moves any failed files to the appropriate directory

If Len(Dir(inPath & "Failed Files", vbDirectory)) = 0 Then
  Call MakeAllDirs(inPath & "Failed Files")
End If
Name inPath & inName As inPath & "Failed Files" & "\" & inName

End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Function DetermineSendTime(inSalesSendTimes, _
                            inRep As String, _
                            MaxTime As Date)
'Determines when contracts are sent out

Dim item As Variant
Dim count As Long
Dim Times() As Date

count = 0
'If the representative is in the dictionary
If inSalesSendTimes.Exists(inRep) Then
  inSalesSendTimes(inRep) = DateAdd("n", 10, inSalesSendTimes(inRep))
  'Avoids sending emails after 1700 hours
  If Hour(inSalesSendTimes(inRep)) >= 17 Then
    inSalesSendTimes(inRep) = DateAdd("n", 940, inSalesSendTimes(inRep))
  End If
  'Avoids sending emails on the weekend
  If Weekday(inSalesSendTimes(inRep), vbSunday) = 1 Then
    inSalesSendTimes(inRep) = DateAdd("d", 1, inSalesSendTimes(inRep))
  ElseIf Weekday(inSalesSendTimes(inRep), vbSunday) = 7 Then
    inSalesSendTimes(inRep) = DateAdd("d", 2, inSalesSendTimes(inRep))
  End If
Else
  If inSalesSendTimes.Count = 0 Then
    inSalesSendTimes(inRep) = DateAdd("n", 5, MaxTime)
  Else
    For Each item in inSalesSendTimes.Keys
      ReDim Preserve Times(count) As Date
      Times(UBound(Times)) = inSalesSendTimes(item)
      count = count + 1
    Next
  Call QuickSort1(Times)
    inSalesSendTimes(inRep) = Times(LBound(Times))
  End If
End If

DetermineSendTime = inSalesSendTimes(inRep)

End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub QuickSort1(ByRef pvarArray As Variant, _
                      Optional ByVal plngLeft As Long, _
                      Optional ByVal plngRight As Long)
'http://www.vbforums.com/showthread.php?473677&p=2909259#post2909259
' Omit plngLeft & plngRight; they are used internally during recursion

    Dim lngFirst As Long
    Dim lngLast As Long
    Dim varMid As Variant
    Dim varSwap As Variant

    If plngRight = 0 Then
        plngLeft = LBound(pvarArray)
        plngRight = UBound(pvarArray)
    End If
    lngFirst = plngLeft
    lngLast = plngRight
    varMid = pvarArray((plngLeft + plngRight) \ 2)
    Do
        Do While pvarArray(lngFirst) < varMid And lngFirst < plngRight
            lngFirst = lngFirst + 1
        Loop
        Do While varMid < pvarArray(lngLast) And lngLast > plngLeft
            lngLast = lngLast - 1
        Loop
        If lngFirst <= lngLast Then
            varSwap = pvarArray(lngFirst)
            pvarArray(lngFirst) = pvarArray(lngLast)
            pvarArray(lngLast) = varSwap
            lngFirst = lngFirst + 1
            lngLast = lngLast - 1
        End If
    Loop Until lngFirst > lngLast
    If plngLeft < lngLast Then QuickSort1 pvarArray, plngLeft, lngLast
    If lngFirst < plngRight Then QuickSort1 pvarArray, lngFirst, plngRight

End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub ContractRenewals()
'The meat and potatoes: This pulls everything together
'SOURCE FOR TIMER: www.TheSpreadsheetGuru.com/the-code-vault

Dim AlreadyProcessed As Long
Dim ArrPos As Long
Dim BodyText As String
Dim ContractAndRepArray
Dim ContractNumber As String
Dim deleteLog As Object
Dim Email As Long
Dim EmailAnswer As Long
Dim Files As Long
Dim FSO As Object
Dim ListForHouseAccount() As String 'Person that gets house contract contracts
Dim ListOfCCRecipients() As String 'The names that receive CCed messages
Dim ListOfNonConReps() As String 'Reps that want non-contract items as well
Dim ListOfRepsToCC() As String 'List of sales representatives that are CCed
Dim ListToNotProcess() As String 'Reps that don't get emails at all
Dim M As Long 'Used when looping through months to check for duplicates
Dim NonWorkbook As Workbook
Dim NonWorkbookPath As String
Dim Path As String
Dim Rep As String
Dim SalesSendTimes As Object
Dim SecondsElapsed As Double
Dim SendTime As Date
Dim ShouldMove As Long
Dim SourceConRow As Variant
Dim SourceWorkbook As Workbook
Dim SpreadSheetAnswer As String
Dim StartTime As Double
Dim TxtList As Variant
Dim TxtWorkbook As Workbook
Dim ValidDir As Integer


Call SetSettings
EmailAnswer = MsgBox("Would you like to email the finished spreadsheets?", _
                      vbYesNo + vbMsgBoxSetForeground, "Email Sheets?")
If EmailAnswer = vbYes Then
  Email = 1
Else
  Email = 0
End If
Files = 0
'Get text file location
Do
  Path = InputBox("Please enter the location of the text files.", _
                  "Text File Location", "S:\CSR\Contract Renewal Text Files\")
  Path = SetPath(Path)
Loop Until Path <> vbNullString
TxtList = GetFileNames(Path)
ValidDir = VerifyTextFile(TxtList, Path)
'Resets settings and exits the macro if no text files are found
If ValidDir = 0 Then
  MsgBox "No text files were found."
  Call ResetSettings
  Exit Sub
End If
Set FSO = CreateObject("Scripting.FileSystemObject")
Open Path & "DataFiles\EmailBody.txt" For Input As #1
BodyText = Input$(LOF(1), 1)
Close #1
If Dir(Path & "DataFiles\DeletedDuplicates.txt") = vbNullString Then
  Set deleteLog = FSO.CreateTextFile(Path & "DataFiles\DeletedDuplicates.txt")
  deleteLog.WriteLine ("Macro run at " & Format(Now, "yyyy/m/dd hh:nn:ss"))
  deleteLog.Close
Else
  Set deleteLog = FSO.OpenTextFile(Path & "DataFiles\DeletedDuplicates.txt", 8)
  deleteLog.WriteBlankLines(1)
  deleteLog.WriteLine("Macro run at " & Format(Now, "yyyy/m/dd hh:nn:ss"))
  deleteLog.Close
End If
'See if there is a source spreadsheet and set its location, if one exists
SpreadSheetAnswer = MsgBox("Do you have a source spreadsheet?", _
                            vbYesNo + vbQuestion + vbMsgBoxSetForeground, _
                            "Source Spreadsheet?")
If SpreadSheetAnswer = vbYes Then
  Workbooks.Open SetSpreadsheet(Path)
  Set SourceWorkbook = ActiveWorkbook
  ListForHouseAccount = GetListOfReps(Path & "DataFiles\HouseAccount.txt")
  ListOfCCRecipients = GetListOfReps(Path & "DataFiles\CcList.txt")
  ListOfNonConReps = GetListOfReps(Path & "DataFiles\NonConList.txt")
  ListOfRepsToCC = GetListOfReps(Path & "DataFiles\RepsThatNeedCc.txt")
  ListToNotProcess = GetListOfReps(Path & "DataFiles\NoProcess.txt")
  Call PrepareSource(SourceWorkbook, ListToNotProcess)
End If
Set SalesSendTimes = CreateObject("Scripting.Dictionary")
'Remember time when macro starts
StartTime = Timer
'Gets the last time that an email is scheduled to be sent and adds 5 minutes
If SpreadSheetAnswer = vbYes Then
  SendTime = DateAdd("n", 5, Application.WorksheetFunction.Max(ActiveWorkbook _
                                                                .ActiveSheet _
                                                                .Range("K:K")))
End If
'Checks if there wasn't already a date in the sent time column,
'or if the send time was in the past
If SendTime < Now Then SendTime = DateAdd("n", 5, SendTime)
'This is what actually formats, saves, and emails the files
For ArrPos = LBound(TxtList) To UBound(TxtList)
  'Opens the file
  Workbooks.OpenText Filename:=Path & TxtList(ArrPos)
  'Identifies the workbook to be formatted
  Set TxtWorkbook = ActiveWorkbook
  'Gets the contract number
  ContractNumber = GetContract(TxtWorkbook)
  'Error handling
  'This first block checks if the contract has been sent in the past 6 months.
  'If it has, it deletes the text file and proceeds.
  'Else, it moves forward with sending the sheet.
  Select Case Month(Now)
  Case 1
    For M = 1 To 5
      If (Dir(Path & "Processed Files\" & MonthName(Month(Now)) & " " _
              & Year(Now) & "\" & TxtList(ArrPos)) <> vbNullString Or _
          Dir(Path & "Processed Files\" & MonthName(12 - M) & " " _
              & (Year(Now) - 1) & "\" & TxtList(ArrPos)) <> vbNullString) _
              And AlreadyProcessed = 0 Then
        Call CloseXslxFiles(TxtWorkbook)
        '8 sets the file to the "ForAppending" mode
        Set deleteLog = FSO.OpenTextFile(Path _
                                          & "DataFiles\DeletedDuplicates.txt", _
                                          8)
        deleteLog.WriteLine (CStr(TxtList(ArrPos)) _
                                  & " deleted due to being a duplicate at " _
                                  & Format(Now, "yyyy/m/dd hh:nn:ss"))
        deleteLog.Close
        Kill Path & TxtList(ArrPos)
        AlreadyProcessed = 1
        Exit For
      End If
    Next M
  Case Is < 6
    For M = 0 To (Month(Now) - 1)
      If (Dir(Path & "Processed Files\" & MonthName(Month(Now)) & " " _
              & Year(Now) & "\" & TxtList(ArrPos)) <> vbNullString Or _
        Dir(Path & "Processed Files\" & MonthName(Month(Now) - M) & " " _
            & Year(Now) & "\" & TxtList(ArrPos)) <> vbNullString Or _
        Dir(Path & "Processed Files\" & MonthName(12 - (6 - M)) & " " _
            & (Year(Now) - 1) & "\" & TxtList(ArrPos)) <> vbNullString) _
        And AlreadyProcessed = 0 Then
        Call CloseXslxFiles(TxtWorkbook)
        Set deleteLog = FSO.OpenTextFile(Path _
                                          & "DataFiles\DeletedDuplicates.txt", _
                                          8)
        deleteLog.WriteLine (CStr(TxtList(ArrPos)) _
                                  & " deleted due to being a duplicate at " _
                                  & Format(Now, "yyyy/m/dd hh:nn:ss"))
        deleteLog.Close
        Kill Path & TxtList(ArrPos)
        AlreadyProcessed = 1
        Exit For
      End If
    Next M
   Case 6
    For M = 0 To (Month(Now) - 1)
      If (Dir(Path & "Processed Files\" & MonthName(Month(Now)) & " " _
              & Year(Now) & "\" & TxtList(ArrPos)) <> vbNullString Or _
        Dir(Path & "Processed Files\" & MonthName(Month(Now) - M) & " " _
            & Year(Now) & "\" & TxtList(ArrPos)) <> vbNullString Or _
        Dir(Path & "Processed Files\" & MonthName(12) & " " & (Year(Now) - 1) _
            & "\" & TxtList(ArrPos)) <> vbNullString) And _
            AlreadyProcessed = 0 Then
        Call CloseXslxFiles(TxtWorkbook)
        Set deleteLog = FSO.OpenTextFile(Path _
                                          & "DataFiles\DeletedDuplicates.txt", _
                                          8)
        deleteLog.WriteLine (CStr(TxtList(ArrPos)) _
                                  & " deleted due to being a duplicate at " _
                                  & Format(Now, "yyyy/m/dd hh:nn:ss"))
        deleteLog.Close
        Kill Path & TxtList(ArrPos)
        AlreadyProcessed = 1
        Exit For
       End If
      Next M
   Case Is > 6
    For M = 0 To 6
      If (Dir(Path & "Processed Files\" & MonthName(Month(Now)) & " " _
              & Year(Now) & "\" & TxtList(ArrPos)) <> vbNullString Or _
        Dir(Path & "Processed Files\" & MonthName(Month(Now) - M) & " " _
            & Year(Now) & "\" & TxtList(ArrPos)) <> vbNullString) _
        And AlreadyProcessed = 0 Then
        Call CloseXslxFiles(TxtWorkbook)
        Set deleteLog = FSO.OpenTextFile(Path _
                                          & "DataFiles\DeletedDuplicates.txt", _
                                          8)
        deleteLog.WriteLine (CStr(TxtList(ArrPos)) _
                                  & " deleted due to being a duplicate at " _
                                  & Format(Now, "yyyy/m/dd hh:nn:ss"))
        deleteLog.Close
        Kill Path & TxtList(ArrPos)
        AlreadyProcessed = 1
        Exit For
       End If
      Next M
  End Select
  If AlreadyProcessed <> 1 Then
  If TxtWorkbook.Worksheets(1).Range("A2").Value = 0 Or ContractNumber = "0" _
    Or ContractNumber = vbNullString Then
      Call CloseXslxFiles(TxtWorkbook)
      Call MoveFailedFiles(Path, CStr(TxtList(ArrPos)))
    Else
      'Locates the contract in the source workbook, if one exists
      If SpreadSheetAnswer = vbYes Then SourceConRow = _
                                          SourceContractRow(SourceWorkbook, _
                                            TxtWorkbook, _
                                            ContractNumber, _
                                            Path, _
                                            CStr(TxtList(ArrPos)))
      If SourceConRow(1) <> "Failed" Then _
        Rep = GetRepName(SpreadSheetAnswer, CLng(SourceConRow(1)), _
                          SourceWorkbook, ContractNumber)
      If IsInArray(Rep, ListOfNonConReps) And SourceConRow(1) <> "Failed" Then
        'This block searches for "NON" file, and if one exists merges the NON and
        'the regular file.
        NonWorkbookPath = Path & ContractNumber & "NON.txt"
        If Len(Dir(NonWorkbookPath)) <> 0 Then
          Workbooks.OpenText NonWorkbookPath
          Set NonWorkbook = ActiveWorkbook
          Call MergeBooks(TxtWorkbook, NonWorkbook)
          Call CloseXslxFiles(NonWorkbook)
          Call MoveProcessedFiles(NonWorkbookPath, Path)
        End If
      End If
    End If
  End If
  'Does not process any "non-process" text files that may have been pulled
  If IsInArray(Rep, ListToNotProcess) And SourceConRow(1) <> "Failed" Then
    Call CloseXslxFiles(TxtWorkbook)
    'Log this deletion?
    Kill Path & TxtList(ArrPos)
  ElseIf SourceConRow(1) <> "Failed" Then
    Call Formatting(TxtWorkbook)
    ContractAndRepArray = SaveXlsxFiles(SourceWorkbook, _
                                        TxtWorkbook, _
                                        SpreadSheetAnswer, _
                                        ContractNumber, _
                                        Rep, _
                                        CLng(SourceConRow(1)), _
                                        CStr(SourceConRow(2)), _
                                        Path)
    If Email = 1 Then
      SendTime = DetermineSendTime(SalesSendTimes, Rep, SendTime)
      Call EmailXslxFiles(ContractAndRepArray(1), _
                          ContractAndRepArray(2), _
                          ContractAndRepArray(3), _
                          BodyText, _
                          SendTime, _
                          TxtWorkbook, _
                          ListOfCCRecipients, _
                          ListForHouseAccount, _
                          ListOfRepsToCC)
      'This logs when the contract was actually sent
      With SourceWorkbook.ActiveSheet.Cells(CLng(SourceConRow(1)), 11)
        .NumberFormat = "mm/dd/yyyy hh:mm:ss"
        .Value = SendTime
        .Columns.AutoFit
      End With
    End If
      If SpreadSheetAnswer = vbYes Then SourceWorkbook.Save
      Call CloseXslxFiles(TxtWorkbook)
      'Sorts the processed files
      Call MoveProcessedFiles(Path & CStr(TxtList(ArrPos)), Path)
      Files = Files + 1
  End If
  AlreadyProcessed = 0
Next ArrPos
'Determine how many seconds code took to run
SecondsElapsed = Round(Timer - StartTime, 2)
'Notify user in seconds
MsgBox "This code processed " & Files & " files in " & SecondsElapsed _
        & " seconds.", vbInformation
Call ResetSettings
ShouldMove = MsgBox("Would you like to move the processed .xslx files to the" _
                    & " appropriate folder?", vbYesNo, "Move Spreadsheets?")
If ShouldMove = vbYes Then Call MoveSpreadsheets(Path)
SourceWorkbook.ActiveSheet.Range("M2").Value = "Not Running"
SourceWorkbook.ActiveSheet.Range("N3").Value = Now
Call CloseXslxFiles(SourceWorkbook)
Application.Quit

End Sub
