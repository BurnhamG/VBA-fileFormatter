Option Explicit

Function SetSpreadsheet(inAnswer As String)
'This is used to select a spreadsheet file, usually the source spreadsheet

Dim CorrectSheet As String
Dim SpreadSheetFile As String
Dim SpreadSheetPath As String

SpreadSheetPath = InputBox("Please enter the directory containing the sheet.", "Sheet Location", "S:\CSR\Contract Renewal Text Files\")
SpreadSheetPath = SetPath(SpreadSheetPath)
SpreadSheetFile = Dir(SpreadSheetPath & "*.xlsx")

Do
    CorrectSheet = MsgBox("Is """ & SpreadSheetFile & """ the correct file?", vbYesNo + vbQuestion + vbMsgBoxSetForeground, "Correct?")

    Do

        If CorrectSheet = vbYes Then
            SetSpreadsheet = SpreadSheetPath & "\" & SpreadSheetFile
        Else
            SpreadSheetFile = Dir
        End If

    Loop Until SetSpreadsheet <> ""

Loop While CorrectSheet <> vbYes

End Function
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Function FindFirstInstanceWhole(inFind, inSheet)

Set FindFirstInstanceWhole = inSheet.Range("A:A").Find(What:=inFind, LookAt:=xlWhole) 'Finds the search term

End Function
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Function FindFirstInstancePart(inFind, inSheet)

Set FindFirstInstancePart = inSheet.Range("A:A").Find(What:=inFind, LookAt:=xlPart) 'Finds the search term

End Function
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Sub Formatting(TextBook As Workbook)
'This formats the workbook

Dim CurrentRow As Long
Dim TableEnd As Long
Dim TableStart As Long
Dim TxtSheet As Excel.Worksheet
Dim WholeTable As Range

Set TxtSheet = TextBook.ActiveSheet

'Locates header row of the table, looking for "Product"
'Identifies the starting and ending row of the table

TableStart = FindFirstInstanceWhole("Product", TxtSheet).Offset(1, 0).Row
TableEnd = TxtSheet.Range("N" & TxtSheet.Rows.Count).End(xlUp).Offset(1, 0).Row

'Set the entire range of the table

Set WholeTable = Range("A" & TableStart, "W" & TableEnd)

'Insert the column for calculated values

Columns("O:O").Insert Shift:=xlToRight

'Insert the actual formula

Range("O" & TableStart, "O" & (TableEnd - 1)).FormulaR1C1 = "=(RC[-1]-RC[-4])/RC[-1]"

'Clear the changes column and the last row with totals

Range("N" & TableStart, "N" & TableEnd).ClearContents
Rows(TableEnd).ClearContents

'Clear any sorting that may exist

TxtSheet.Sort.SortFields.Clear

'Sort the entire table by the Sold column (E), from largest to smallest

WholeTable.Sort Key1:=Range("E" & TableStart, "E" & TableEnd), Order1:=xlDescending, DataOption1:=xlSortNormal

'This next loop is used to color lines without any sales in the past year red
'First, set the counter / placeholder variable to be equal with the first data row of the table

CurrentRow = TableStart

'Next, this iterates through the table and, if the sales column is blank, changes the font color to bright red

Do While CurrentRow < TableEnd

    If IsEmpty(Cells(CurrentRow, "E")) Then

        With Rows(CurrentRow).Font
            .Color = 255
            .TintAndShade = 0
        End With

    End If

        CurrentRow = CurrentRow + 1
Loop

'This marks the appropriate rows with a currency style
Range("G:G,J:J,K:K").NumberFormat = "$#,##0.00"

'This fills any cells with a negative gross profit ratio purple
With Columns("I:I")
    .FormatConditions.Delete 'Removes any conditional formatting that may exist (Mostly a safeguard)

    With .FormatConditions.Add(Type:=xlCellValue, Operator:=xlLess, Formula1:="=0") 'Condition searches for any cells with a negative value

        With .Interior
            .Color = 16751052 'The fill color
            .TintAndShade = 0
        End With

        .StopIfTrue = False 'Only used with multiple conditional formatting rules (To prevent further formatting of cells that are true in the first pass)

   End With

End With

End Sub
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Function VerifyTextFile(InArray, inPath As String)
'Verify that text files exist in the directory by looking at array length

If UBound(InArray) = -1 Then

    MsgBox "No text files were found in this directory." & vbNewLine & "The current directory is " & inPath & vbNewLine & "Please confirm that you entered the correct path to the text files.", , "No Valid Files Found"
    VerifyTextFile = vbNullString

Else

    VerifyTextFile = 1

End If

End Function
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Sub MakeAllDirs(sPath As String)
'Creates all parent direcories of a missing directory

Dim I               As Integer
Dim aDirs           As Variant
Dim iStart          As Integer
Dim sCurDir         As String

If sPath <> vbNullString Then

    aDirs = Split(sPath, "\")

    If Left(sPath, 2) = "\\" Then

        iStart = 3

    Else

        iStart = 1

    End If

    sCurDir = Left(sPath, InStr(iStart, sPath, "\"))

    For I = iStart To UBound(aDirs)

        sCurDir = sCurDir & aDirs(I) & "\"

        If Dir(sCurDir, vbDirectory) = vbNullString Then

            MkDir sCurDir

        End If

    Next I

End If

End Sub
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Function SetPath(inPath As String)
'Sets a path

Dim MakePathAnswer As Integer

'Check to ensure path is valid, and verify that text files are in the appropriate directory

If inPath = vbNullString Then

    Call ResetSettings
    End

ElseIf inPath Like "*[a-zA-Z][:\\]*" <> True Then

    If Len(inPath) > 1 And Not Right(inPath, 1) Like "[:\\]" And Not inPath Like "*[0-9]*[:\\]" And Not inPath Like "*[0-9]*" Then

        MsgBox "Sorry, that path is not valid." & vbNewLine & "Please ensure that the path ends with a colon or a backslash.", , "Missing Colon or Backslash"
        inPath = vbNullString

    Else

        MsgBox "Sorry, that path is not valid.", , "Invalid Path"
        inPath = vbNullString

    End If

ElseIf Len(Dir(inPath, vbDirectory)) = 0 Then

    MakePathAnswer = MsgBox("Sorry, that path does not exist." & vbNewLine & "Would you like to create this path?", vbYesNo + vbQuestion + vbMsgBoxSetForeground, "Create directory?")

    If MakePathAnswer = vbYes Then

        Call MakeAllDirs(inPath)

    Else

        inPath = vbNullString

    End If

End If

If inPath <> vbNullString And Right(inPath, 1) <> "\" Then inPath = inPath & "\"

SetPath = inPath

End Function
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Function GetRepName(inSheetAnswer As String, inSourceRow, inSourceBook As Workbook, inContractNo As String)
'Gets the name of the sales representative from the source workbook

Dim Attempts As Integer
Dim CurrentCell
Dim EmptyCount As Long
Dim SalesRepSplit

Do While GetRepName Like "[a-zA-Z]*[ ]*[a-zA-Z]" <> True 'Can't escape unless name is valid

    If inSheetAnswer = vbYes Then

        If IsEmpty(inSourceBook.ActiveSheet.Cells(inSourceRow + 1, 2).Value) Then 'This counts how many different companies fall under the same contract

            Set CurrentCell = Cells(inSourceRow + 1, 2)
            EmptyCount = 1

            If IsEmpty(CurrentCell.Offset(1, 0)) Then

                CurrentCell = CurrentCell.Offset(1, 0)
                EmptyCount = EmptyCount + 1

            End If

        End If

        If Not IsEmpty(inSourceBook.ActiveSheet.Cells(inSourceRow, 8).Value) And EmptyCount > 2 Then 'If there are more than two companies on the same contract, then the main owner receives the email

            SalesRepSplit = Split(Trim(inSourceBook.ActiveSheet.Cells(inSourceRow, 8)).Value, " ")
            GetRepName = Trim(SalesRepSplit(1)) & " " & Trim(SalesRepSplit(2))

        Else 'Otherwise the sales representative gets the email

            SalesRepSplit = Split(Trim(inSourceBook.ActiveSheet.Cells(inSourceRow, 7).Value), " ")
            GetRepName = Trim(SalesRepSplit(1)) & " " & Trim(SalesRepSplit(2))

        End If

        Attempts = Attempts + 1

    Else 'This runs if there is no source spreadsheet

        GetRepName = InputBox("Please enter the name of the Sales Representative" & vbNewLine & "associated with this contract." & vbNewLine & "Contract Number: " & inContractNo, "Sales Representative Name")

       If GetRepName = vbNullString Then

            Call ResetSettings
            End

        ElseIf GetRepName Like "*[0-9]*" Then

            MsgBox "Sorry, only letters are allowed in a Sales Representative's name." & vbNewLine & "Please enter the Representative's name with this format:" & vbNewLine & "FirstName LastName", , "Invalid Character"
            GetRepName = vbNullString

        ElseIf InStr(GetRepName, " ") = 0 Then

            MsgBox "Please enter the Representative's name with this format:" & vbNewLine & "FirstName LastName", , "Missing Space"
            GetRepName = vbNullString

        End If

    End If

    If Attempts = 3 Then

        MsgBox "A valid sales representative name was not found"
        Call ResetSettings
        End

    End If

Loop

GetRepName = StrConv(Trim(GetRepName), vbProperCase)

End Function
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Sub MergeBooks(inBook As Workbook, inNonBook As Workbook)
'Merges contract and non contract items for Teri Sprtel

Dim NonEnd As Long
Dim NonStart As Long
Dim OnEnd As Long

NonEnd = inNonBook.ActiveSheet.Range("N" & inNonBook.ActiveSheet.Rows.Count).End(xlUp).Offset(1, 0).Row
NonStart = FindFirstInstanceWhole("Product", inNonBook.ActiveSheet).Offset(1, 0).Row
OnEnd = inBook.ActiveSheet.Range("N" & inBook.ActiveSheet.Rows.Count).End(xlUp).Offset(1, 0).Row

'This copies the "NON" workbook's table to the end of the main workbook's table so they are sorted together
If NonStart <> NonEnd Then inBook.ActiveSheet.Range(inBook.ActiveSheet.Cells(OnEnd, 1), inBook.ActiveSheet.Cells(OnEnd + (NonEnd - NonStart), 22)).Value = inNonBook.ActiveSheet.Range(inNonBook.ActiveSheet.Cells(NonStart, 1), inNonBook.ActiveSheet.Cells(NonEnd, 22)).Value

End Sub
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Function GetContract(TextBook As Workbook)
'This gets the contract number from the information in the text file

Dim TxtContractSplit

TxtContractSplit = Split(TextBook.ActiveSheet.Range("A3").Value, ",")

'This block checks for a text file that only has one contract listed and then splits by space in order to get the correct value
If UBound(TxtContractSplit, 1) - LBound(TxtContractSplit, 1) + 1 <= 2 Then

    TxtContractSplit = Split(TextBook.ActiveSheet.Range("A3").Value, " ")
    GetContract = Trim(TxtContractSplit(1))

Else

    GetContract = Trim(TxtContractSplit(1))

End If

If Right(GetContract, 1) = "," Then GetContract = Left(GetContract, Len(GetContract) - 1) 'Removes trailing comma

End Function
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Function SourceContractRow(inSourceBook As Workbook, inSheetAnswer As String, inContractNo As String) As Variant

Dim TempOne As String
Dim TempTwo As String
Dim TempArray(1 To 2) As Variant

TempOne = FindFirstInstancePart(inContractNo, inSourceBook.ActiveSheet).Row
TempTwo = inContractNo & " " & Trim(inSourceBook.ActiveSheet.Cells(TempOne, 2).Value)

TempArray(1) = TempOne
TempArray(2) = TempTwo

SourceContractRow = TempArray

End Function
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Function SaveXlsxFiles(SourceBook As Workbook, TextBook As Workbook, SheetAnswer As String, ContractNo As String, inRep As String, SourceRow, SourceName, inPath As String)
'Saves the file using the contract name and the sales rep name

Dim ContractAndRep(1 To 3) As String
Dim FirstName As String
Dim SaveName As String
Dim SavePath As String
Dim SpacePlace As Long

If SheetAnswer = vbYes Then 'If there is a source sheet

    SaveName = SourceName

    'This sets the current time as when the file was processed
    With SourceBook.ActiveSheet.Cells(SourceRow, 9)
        .NumberFormat = "mm/dd/yyyy hh:mm:ss"
        .Value = Now
        .Cells.Columns.autofit
    End With


Else 'No source sheet

    SaveName = Trim(TextBook.ActiveSheet.Range("A2").Value)
    SpacePlace = InStr(1, SaveName, " ", vbTextCompare)

    'This checks for mismatched contract numbers, and alerts the user to identify the correct number
    If ContractNo <> Trim(Left(SaveName, SpacePlace)) Then

        SaveName = InputBox("Contract numbers do not match." & vbNewLine & "Please enter the contract number and name.", "Contract Number and Name")
        SpacePlace = InStr(1, SaveName, " ", vbTextCompare)
        ContractNo = Trim(Left(SaveName, SpacePlace))

    End If

End If

SaveName = Replace(SaveName, "/", "-") 'Removes any forward slashes
SpacePlace = InStr(1, inRep, " ", vbTextCompare)
FirstName = Trim(Left(inRep, SpacePlace))

ContractAndRep(1) = ContractNo
ContractAndRep(2) = inRep
ContractAndRep(3) = FirstName

SavePath = inPath & "Contract Renewals\" & ContractAndRep(2) & "\"

If Len(Dir(SavePath, vbDirectory)) = 0 Then Call MakeAllDirs(SavePath)

Application.DisplayAlerts = False

TextBook.SaveAs Filename:=SavePath & SaveName & ".xlsx", FileFormat:=51, AccessMode:=xlExclusive, ConflictResolution:=Excel.XlSaveConflictResolution.xlLocalSessionChanges '51 is the enumeration for .xlsx files

Application.DisplayAlerts = True

SaveXlsxFiles = ContractAndRep

End Function
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Function EmailXslxFiles(InContract, InSalesRep, InFirstName, InSendTime As Date, SourceBook As Workbook, TextBook As Workbook, inSheetAnswer As String, SourceRow, SourceName)
'Working in Excel 2000-2016
'This example sends the last saved version of the Activeworkbook
'For Tips see: http://www.rondebruin.nl/win/winmail/Outlook/tips.htm

Dim EmailBody As String
Dim SaveName As String
Dim OutApp As Object
Dim OutMail As Object

Set OutApp = CreateObject("Outlook.Application")
Set OutMail = OutApp.CreateItem(0)

EmailBody = "Hello " & InFirstName & "," & "<p>Please see the attached contract review. Items in <b><span style='color:#7030A0'>purple</span></b> are at or below cost, Items in <b><span style='color:red'>red</span></b> have not been purchased in the past year. Please let me know what you would like to do.</p> <p>Please forward all changes to <a href=vbNullStringmailto:contracts@cowiweb.comvbNullString>contracts@cowiweb.com</a></p> <p>Thank you, and have a great day!</p>"

On Error Resume Next

With OutMail

    .DeferredDeliveryTime = InSendTime

    If InSalesRep = "House Account" Then

        .To = "Andrea Bresnahan"

    Else

        .To = InSalesRep

    End If

    If InSalesRep = "Jim Condon" Or InSalesRep = "Kevin Dillon" Or InSalesRep = "Jack Kraemer" Or InSalesRep = "Brent Brenner" Or InSalesRep = "Matt Wierman" Or InSalesRep = "Brad Pederson" Then

        .CC = "Paul Larson" 'ADD THIS BACK AUGUST 28!!!!!!!!!!!

    Else

        .CC = vbNullString

    End If

    .BCC = vbNullString
    .Subject = InContract & " Contract Renewal"
    .HTMLBody = EmailBody
    .Attachments.Add TextBook.FullName
    'You can add other files also like this
    '.Attachments.Add ("C:\test.txt")
    .Send   'or use .Display
    '.Display

End With

On Error GoTo 0

Set OutMail = Nothing
Set OutApp = Nothing

If inSheetAnswer = vbYes Then 'If there is a source sheet

    SaveName = SourceName

    'This logs when the contract was actually sent
    With SourceBook.ActiveSheet.Cells(SourceRow, 10)
        .NumberFormat = "mm/dd/yyyy hh:mm:ss"
        .Value = InSendTime
        .Cells.Columns.autofit
    End With

End If

'Sets up delayed delivery so as to not flood the system
InSendTime = DateAdd("n", 3, InSendTime)

'Avoids sending emails after 1700 hours
If Hour(InSendTime) >= 17 Then InSendTime = DateAdd("n", 940, InSendTime)

'Avoids sending emails on the weekend
If Weekday(InSendTime, vbSunday) = 1 Then

    InSendTime = DateAdd("d", 1, InSendTime)

ElseIf Weekday(InSendTime, vbSunday) = 7 Then

    InSendTime = DateAdd("d", 2, InSendTime)

End If

EmailXslxFiles = InSendTime

End Function

Sub CloseXslxFiles(inBook As Workbook)

Application.DisplayAlerts = False
inBook.Close
Application.DisplayAlerts = True

End Sub
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Function GetFileNames(FilesLoc As String)
'Loops through the provided folder and stores matching filenames in an array

Dim I As Long
Dim InTxtList() As Variant
Dim TxtPath As String

I = 0

TxtPath = Dir(FilesLoc & "*.txt")

'Structure from http://www.java2s.com/Code/VBA-Excel-Access-Word/File-Path/Usearraytostorealistoffiles.htm
'This next block avoids processing text files that end with "non," which are only for Teri Sprtel (as of 8/21/2017) and are treated separately

Do While TxtPath <> vbNullString

    If Not LCase(TxtPath) Like LCase("*NON.txt") Then

        I = I + 1
        ReDim Preserve InTxtList(1 To I)
        InTxtList(I) = TxtPath
        TxtPath = Dir

    Else

        TxtPath = Dir

    End If

Loop

GetFileNames = InTxtList

End Function
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Sub MoveProcessedFiles(InFile)
'Moves processed files to a directory for archiving by month

Dim NameOfFile As Variant

If Len(Dir("S:\CSR\Contract Renewal Text Files\Processed Files\" & MonthName(Month(Now)) & " " & Year(Now) & "\", vbDirectory)) = 0 Then Call MakeAllDirs("S:\CSR\Contract Renewal Text Files\Processed Files\" & MonthName(Month(Now)) & " " & Year(Now) & "\")

'Gets just the text file name, and saves it to NameOfFile
NameOfFile = Split(InFile, "\")

'Saves the file under the current month and year folder
Name InFile As "S:\CSR\Contract Renewal Text Files\Processed Files\" & MonthName(Month(Now)) & " " & Year(Now) & "\" & NameOfFile(UBound(NameOfFile))

End Sub
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Sub PrepareSource()
'Properly formats the source sheet for logging

Dim FirstAddress As String
Dim I As Long
Dim NamesArr As Variant
Dim Rng As Range

If Range("L1") <> "Prepared" Then

    'This fixes the partial name of Michelle Salverson
    Cells.Replace What:="Salvers", Replacement:="SALVERSON", LookAt:=xlPart, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, ReplaceFormat:=True

    'These are the values that the next block searches for
    NamesArr = Array("Jerry Julius", "Chad Miller", "15 SBALASCH-OPEN 1/")

    'Search Column or range
    With Sheets("Sheet1").Range("G:G")

        For I = LBound(NamesArr) To UBound(NamesArr)

            'If you want to find a part of the rng.value then use xlPart
            'if you use LookIn:=xlValues it will also work with a
            'formula cell that evaluates to the search term.
            'This next block searches for the values in the above array

            Set Rng = .Find(What:=NamesArr(I), _
                            After:=.Cells(.Cells.Count), _
                            LookIn:=xlFormulas, _
                            LookAt:=xlPart, _
                            SearchOrder:=xlByRows, _
                            SearchDirection:=xlNext, _
                            MatchCase:=False)

            If Not Rng Is Nothing Then

                FirstAddress = Rng.Address
                Do
                    'Mark to the right if the search term is found
                    With Rng.Offset(0, 2)
                        .Value = "IGNORED"
                        .Interior.Color = 65535
                    End With

                    Set Rng = .FindNext(Rng)

                Loop While Not Rng Is Nothing And Rng.Address <> FirstAddress

            End If

        Next I

    End With

    With Cells(1, 9)
        .Value = "Time Processed"
        .Interior.Color = 12632256
    End With

    With Cells(1, 10)
        .Value = "Time Sent"
        .Interior.Color = 12632256
    End With

    Range("I:J").Borders.LineStyle = xlContinuous
    Range("L3").Value = "Last Run:"
    Range("L1").Value = "Prepared"


End If

Range("L2").Value = "RUNNING"
Cells.Font.Name = "Tahoma"
Cells.Columns.autofit
ActiveWorkbook.Save

End Sub
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Sub MoveSpreadsheets(inPath As String)
'http://www.rondebruin.nl/win/s3/win026.htm
'This moves the spreadsheets that have been sent to the sales representatives to the proper directory for archiving

Dim FSO As Object
Dim FromPath As String
Dim ToPath As String

FromPath = inPath & "Contract Renewals\*"
ToPath = "S:\Contract Reviews\"

Set FSO = CreateObject("scripting.filesystemobject")
FSO.CopyFolder Source:=FromPath, Destination:=ToPath
FSO.DeleteFolder FromPath 'Removes the folder after files are copied

End Sub
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Sub SetSettings()
'This helps the macro run faster

Application.ScreenUpdating = False
Application.Calculation = xlCalculationManual
Application.EnableEvents = False

End Sub
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Sub ResetSettings()
'This resets the modified settings to their defaults

Application.ScreenUpdating = True
Application.Calculation = xlCalculationAutomatic
Application.EnableEvents = True

End Sub
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Sub ContractRenewals()
'The meat and potatoes: This pulls everything together and completes the entire process
'SOURCE FOR TIMER: www.TheSpreadsheetGuru.com/the-code-vault

Dim ArrPos As Long
Dim ContractAndRepArray
Dim ContractNumber As String
Dim Email As Integer
Dim EmailAnswer As Integer
Dim Files As Long
Dim NonWorkbook As Workbook
Dim NonWorkbookPath As String
Dim Path As String
Dim Rep As String
Dim SecondsElapsed As Double
Dim SendTime As Date
Dim ShouldMove As Integer
Dim SourceConRow As Variant
Dim SourceWorkbook As Workbook
Dim SpreadSheetAnswer As String
Dim StartTime As Double
Dim TxtList() As Variant
Dim TxtWorkbook As Workbook
Dim ValidDir As String

Call SetSettings

EmailAnswer = MsgBox("Would you like to email the finished spreadsheets?", vbYesNo + vbMsgBoxSetForeground, "Email Sheets?")

If EmailAnswer = vbYes Then

    Email = 1

Else

    Email = 0

End If

Files = 0

'See if there is a source spreadsheet and set its location, if one exists
SpreadSheetAnswer = MsgBox("Do you have a source spreadsheet?", vbYesNo + vbQuestion + vbMsgBoxSetForeground, "Source Spreadsheet?")

If SpreadSheetAnswer = vbYes Then

    Workbooks.Open SetSpreadsheet(SpreadSheetAnswer)
    Set SourceWorkbook = ActiveWorkbook
    Call PrepareSource

End If

'Get text file location
Do
    Path = InputBox("Please enter the location of the text files.", "Text File Location", "S:\CSR\Contract Renewal Text Files\")

    Path = SetPath(Path)

Loop Until Path <> vbNullString

TxtList = GetFileNames(Path)

ValidDir = VerifyTextFile(TxtList, Path)

'This resets settings and exits the macro if no text files are found in the directory
If ValidDir = vbNullString Then

    MsgBox "No text files were found."
    Call ResetSettings
    Exit Sub

End If

'Remember time when macro starts
StartTime = Timer

'Gets the last time that an email is scheduled to be sent and adds 5 minutes
If SpreadSheetAnswer = vbYes Then SendTime = DateAdd("n", 5, Application.WorksheetFunction.Max(ActiveWorkbook.ActiveSheet.Range("J:J")))

If SendTime < Now Then SendTime = Now 'Checks if there wasn't already a date in the sent time column, or if the send time was in the past

'This is what actually formats, saves, and emails the files
For ArrPos = LBound(TxtList) To UBound(TxtList)

    'Opens the file
    Workbooks.OpenText Filename:=Path & TxtList(ArrPos)

    'Identifies the workbook to be formatted
    Set TxtWorkbook = ActiveWorkbook

    'Gets the contract number
    ContractNumber = GetContract(TxtWorkbook)

    'Error handling
	If Dir("S:\CSR\Contract Renewal Text Files\Processed Files\" & MonthName(Month(Now)) & " " & Year(Now) & "\" & TxtList(ArrPos)) <> "" or _
		Dir("S:\CSR\Contract Renewal Text Files\Processed Files\" & MonthName(Month(Now)-1) & " " & Year(Now) & "\" & TxtList(ArrPos)) <> "" Then

		Kill Path & TxtList(ArrPos)

    Else If Range("A2").Value = 0 Or ContractNumber = "0" Or ContractNumber = vbNullString Then

        Call CloseXslxFiles(TxtWorkbook)

        If Len(Dir("S:\CSR\Contract Renewal Text Files\Failed Files", vbDirectory)) = 0 Then Call MakeAllDirs("S:\CSR\Contract Renewal Text Files\Failed Files")

        Name Path & TxtList(ArrPos) As "S:\CSR\Contract Renewal Text Files\Failed Files" & "\" & TxtList(ArrPos)

    Else

        'Locates the contract in the source workbook, if one exists
        If SpreadSheetAnswer = vbYes Then SourceConRow = SourceContractRow(SourceWorkbook, SpreadSheetAnswer, ContractNumber)

        Rep = GetRepName(SpreadSheetAnswer, SourceConRow(1), SourceWorkbook, ContractNumber)

        If Rep = "Teri Sprtel" Then

           'This block searches for "NON" file, and if one exists merges the NON and the regular file.
            NonWorkbookPath = Path & ContractNumber & "NON.txt"

            If Len(Dir(NonWorkbookPath)) <> 0 Then

                Workbooks.OpenText NonWorkbookPath
                Set NonWorkbook = ActiveWorkbook
                Call MergeBooks(TxtWorkbook, NonWorkbook)
                Call CloseXslxFiles(NonWorkbook)
                Call MoveProcessedFiles(NonWorkbookPath)

            End If

        End If

        'Does not process any Jerry Julius or Chad Miller text files that may have been pulled
        If Rep = "Jerry Julius" Or Rep = "Chad Miller" Then

            Call CloseXslxFiles(TxtWorkbook)

            Kill Path & TxtList(ArrPos)

        Else

            Call Formatting(TxtWorkbook)

            ContractAndRepArray = SaveXlsxFiles(SourceWorkbook, TxtWorkbook, SpreadSheetAnswer, ContractNumber, Rep, SourceConRow(1), SourceConRow(2), Path)

            If Email = 1 Then SendTime = EmailXslxFiles(ContractAndRepArray(1), ContractAndRepArray(2), ContractAndRepArray(3), SendTime, SourceWorkbook, TxtWorkbook, SpreadSheetAnswer, SourceConRow(1), SourceConRow(2))

            If SpreadSheetAnswer = vbYes Then SourceWorkbook.Save

            Call CloseXslxFiles(TxtWorkbook)

            'Sorts the processed files
            Call MoveProcessedFiles(Path & TxtList(ArrPos))

        End If

        Files = Files + 1

    End If


Next ArrPos

'Determine how many seconds code took to run
SecondsElapsed = Round(Timer - StartTime, 2)

'Notify user in seconds
MsgBox "This code processed " & Files & " files in " & SecondsElapsed & " seconds.", vbInformation

Call ResetSettings

ShouldMove = MsgBox("Would you like to move the processed .xslx files to the appropriate folder?", vbYesNo, "Move Spreadsheets?")

If ShouldMove = vbYes Then Call MoveSpreadsheets(Path)

SourceWorkbook.ActiveSheet.Range("L2").Value = "Not Running"
SourceWorkbook.ActiveSheet.Range("M3").Value = Now

Call CloseXslxFiles(SourceWorkbook)
Application.Quit

End Sub
